#pragma once

#ifndef _N4409_PARALLELSTL
#define _N4409_PARALLELSTL
#endif

#define __NOEXCEPT noexcept

#include <experimental/parallel/execution_policy>

namespace std          {
namespace experimental {
namespace parallel     {
inline namespace v1    {

// for_each
//
struct __for_each
{
    template<class ExecutionPolicy, class InputIt, class Unary>
    void operator()(ExecutionPolicy &&exec, InputIt first, InputIt last, Unary f) const
    {
        dispatch(*this, std::forward<ExecutionPolicy>(exec), first, last, f);
    }
};
template<class ExecutionPolicy, class InputIt, class Unary>
typename __enable_if_execution_policy<ExecutionPolicy>::type  
for_each(ExecutionPolicy &&exec, InputIt first, InputIt last, Unary f)
{
    __for_each{}(std::forward<ExecutionPolicy>(exec), first, last, f);
}

// sort
//
struct __sort
{
    template<class ExecutionPolicy, class RandomIt>
    void operator()(ExecutionPolicy &&exec, RandomIt first, RandomIt last) const
    {
        dispatch(*this, std::forward<ExecutionPolicy>(exec), first, last);
    }
};
template<class ExecutionPolicy, class RandomIt>
typename __enable_if_execution_policy<ExecutionPolicy>::type  
sort(ExecutionPolicy &&exec, RandomIt first, RandomIt last)
{
    __sort{}(std::forward<ExecutionPolicy>(exec), first, last);
}



}
}
}
}

#include <experimental/parallel/detail/sequential_policy.hpp>
#include <experimental/parallel/detail/parallel_policy.hpp>
#include <experimental/parallel/detail/dynamic_policy.hpp>

